{"name": "test_case6", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: MicrosoftEdge=139.0.3405.125); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79455e795+22117]\n\t(No symbol) [0x0x7ff7944aee10]\n\tGetHandleVerifier [0x0x7ff7947e4c3c+2669324]\n\t(No symbol) [0x0x7ff794290465]\n\t(No symbol) [0x0x7ff79428f0bf]\n\t(No symbol) [0x0x7ff79429086d]\n\t(No symbol) [0x0x7ff794284242]\n\t(No symbol) [0x0x7ff79429089e]\n\t(No symbol) [0x0x7ff794284242]\n\t(No symbol) [0x0x7ff794282695]\n\t(No symbol) [0x0x7ff794286371]\n\t(No symbol) [0x0x7ff794308093]\n\t(No symbol) [0x0x7ff7942ea7ea]\n\t(No symbol) [0x0x7ff7942bf68d]\n\t(No symbol) [0x0x7ff79430762f]\n\t(No symbol) [0x0x7ff7942ea553]\n\t(No symbol) [0x0x7ff7942beb86]\n\t(No symbol) [0x0x7ff7942bde11]\n\t(No symbol) [0x0x7ff7942be9b3]\n\t(No symbol) [0x0x7ff7943b907d]\n\t(No symbol) [0x0x7ff7943c5fe8]\n\tGetHandleVerifier [0x0x7ff79463f287+942423]\n\tGetHandleVerifier [0x0x7ff794648231+979201]\n\t(No symbol) [0x0x7ff7944bc3c1]\n\t(No symbol) [0x0x7ff7944b4d74]\n\t(No symbol) [0x0x7ff7944b4ec3]\n\t(No symbol) [0x0x7ff7944a7026]\n\tBaseThreadInitThunk [0x0x7ffe2d077374+20]\n\tRtlUserThreadStart [0x0x7ffe2e81cc91+33]", "trace": "self = <test_case6.Test6 object at 0x000001E4C6D02850>\n\n>   ???\n\nC:\\product testing-embedded\\project\\Zero Banking Project\\tests\\test_case6.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\fund_transfer.py:48: in enter_money\n    self.click_operation(self.SUBMIT_BTN)\nbase\\base_page.py:29: in click_operation\n    element = self.wait.until(EC.element_to_be_clickable(locator))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:625: in _predicate\n    element = visibility_of(target)(driver)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:252: in _predicate\n    return _element_if_visible(element)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:272: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n                      ^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:341: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E4C6E04210>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...[0x0x7ff7944a7026]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe2d077374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe2e81cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: MicrosoftEdge=139.0.3405.125); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79455e795+22117]\nE       \t(No symbol) [0x0x7ff7944aee10]\nE       \tGetHandleVerifier [0x0x7ff7947e4c3c+2669324]\nE       \t(No symbol) [0x0x7ff794290465]\nE       \t(No symbol) [0x0x7ff79428f0bf]\nE       \t(No symbol) [0x0x7ff79429086d]\nE       \t(No symbol) [0x0x7ff794284242]\nE       \t(No symbol) [0x0x7ff79429089e]\nE       \t(No symbol) [0x0x7ff794284242]\nE       \t(No symbol) [0x0x7ff794282695]\nE       \t(No symbol) [0x0x7ff794286371]\nE       \t(No symbol) [0x0x7ff794308093]\nE       \t(No symbol) [0x0x7ff7942ea7ea]\nE       \t(No symbol) [0x0x7ff7942bf68d]\nE       \t(No symbol) [0x0x7ff79430762f]\nE       \t(No symbol) [0x0x7ff7942ea553]\nE       \t(No symbol) [0x0x7ff7942beb86]\nE       \t(No symbol) [0x0x7ff7942bde11]\nE       \t(No symbol) [0x0x7ff7942be9b3]\nE       \t(No symbol) [0x0x7ff7943b907d]\nE       \t(No symbol) [0x0x7ff7943c5fe8]\nE       \tGetHandleVerifier [0x0x7ff79463f287+942423]\nE       \tGetHandleVerifier [0x0x7ff794648231+979201]\nE       \t(No symbol) [0x0x7ff7944bc3c1]\nE       \t(No symbol) [0x0x7ff7944b4d74]\nE       \t(No symbol) [0x0x7ff7944b4ec3]\nE       \t(No symbol) [0x0x7ff7944a7026]\nE       \tBaseThreadInitThunk [0x0x7ffe2d077374+20]\nE       \tRtlUserThreadStart [0x0x7ffe2e81cc91+33]\n\nC:\\Users\\DELL\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "stdout", "source": "2bdf221a-987f-4ac6-80cc-8eaff9be7667-attachment.txt", "type": "text/plain"}], "start": 1756873710712, "stop": 1756873730910, "uuid": "bb98b91d-735f-446e-9f18-ca8512340aed", "historyId": "4bfad04a493c4ae7a751e3b42d570061", "testCaseId": "4bfad04a493c4ae7a751e3b42d570061", "fullName": "tests.test_case6.Test6#test_case6", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_case6"}, {"name": "subSuite", "value": "Test6"}, {"name": "host", "value": "DESKTOP-AGKRQEG"}, {"name": "thread", "value": "27640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_case6"}], "titlePath": ["tests", "test_case6.py", "Test6"]}